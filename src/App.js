import {
  rotationProducts,
  rotationGrayMold,
  rotationAlternaria,
  rotationBacteriosis,
  getAdvancedTreatments,
} from "./data/productData";
import React, { useState, useEffect } from "react";
import LogoutButton from "./components/LogoutButton";
import AppIntro from "./components/AppIntro";
import Step1Region from "./steps/Step1Region";
import Step2Season from "./steps/Step2Season";
import Step3Run from "./steps/Step3Run";
import Step4Results from "./steps/Step4Results";
import LoginPage from "./components/LoginPage";
import CalendarView from "./components/CalendarView";

import { onAuthStateChanged } from "firebase/auth";
import { auth } from "./firebase";

export default function App() {
  const [user, setUser] = useState(null);
  const [step, setStep] = useState(1);
  const [region, setRegion] = useState(null);
  const [plantingDate, setPlantingDate] = useState("");
  const [harvestDate, setHarvestDate] = useState("");
  const [useForecast, setUseForecast] = useState(false);
  const [diseases, setDiseases] = useState(["lateBlight"]);
  const [result, setResult] = useState(null);

  // üîÅ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, setUser);
    return () => unsubscribe();
  }, []);

  // üîê –Ø–∫—â–æ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É –≤—Ö–æ–¥—É
  if (!user) return <LoginPage onLogin={setUser} />;

  // üîÅ –ü–µ—Ä–µ—Ö–æ–¥–∏ –º—ñ–∂ –∫—Ä–æ–∫–∞–º–∏
  const next = () => setStep((s) => Math.min(s + 1, 4));
  const back = () => setStep((s) => Math.max(s - 1, 1));

  // üîò –ü–æ–¥—ñ—ó –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–º–æ–∂–Ω–∞ –±—É–¥–µ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ñ)
  const mockEvents = [
    { date: "20.09.2025", title: "–û–±—Ä–æ–±–∫–∞ 1", description: "–§—ñ—Ç–æ—Ñ—Ç–æ—Ä–æ–∑: –ó–æ—Ä–≤–µ–∫ –Ü–Ω–∫–∞–Ω—Ç—ñ—è" },
    { date: "25.09.2025", title: "–û–±—Ä–æ–±–∫–∞ 2", description: "–°—ñ—Ä–∞ –≥–Ω–∏–ª—å: –°—ñ–≥–Ω—É–º" },
  ];

  return (
    <div className="main-container" style={{ maxWidth: 800, margin: "0 auto", padding: 20 }}>
      {/* üîê –ö–Ω–æ–ø–∫–∞ –≤–∏—Ö–æ–¥—É */}
      <div style={{ display: "flex", justifyContent: "flex-end", marginBottom: 10 }}>
        <LogoutButton onLogout={() => setUser(null)} />
      </div>

      {/* üî¢ –ü—Ä–æ–≥—Ä–µ—Å–±–∞—Ä */}
      <ProgressBar step={step} />

      {/* üìò –í—Å—Ç—É–ø–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è */}
      {step === 1 && <AppIntro />}

      {/* –ö—Ä–æ–∫ 1 ‚Äî –í–∏–±—ñ—Ä —Ä–µ–≥—ñ–æ–Ω—É */}
      {step === 1 && (
        <Step1Region region={region} setRegion={setRegion} onNext={next} />
      )}

      {/* –ö—Ä–æ–∫ 2 ‚Äî –í–∏–±—ñ—Ä —Å–µ–∑–æ–Ω—É */}
      {step === 2 && (
        <Step2Season
          plantingDate={plantingDate}
          setPlantingDate={setPlantingDate}
          harvestDate={harvestDate}
          setHarvestDate={setHarvestDate}
          useForecast={useForecast}
          setUseForecast={setUseForecast}
          onNext={({ diseases }) => {
            setDiseases(diseases);
            next();
          }}
          onBack={back}
        />
      )}

      {/* –ö—Ä–æ–∫ 3 ‚Äî –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ */}
      {step === 3 && (
        <Step3Run
          region={region}
          plantingDate={plantingDate}
          harvestDate={harvestDate}
          useForecast={useForecast}
          diseases={diseases}
          onResult={(res) => {
            setResult(res);
            next();
          }}
          onBack={back}
        />
      )}

      {/* –ö—Ä–æ–∫ 4 ‚Äî –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä */}
      {step === 4 && (
        <>
          <Step4Results result={result} onRestart={() => setStep(1)} />

          <h3 style={{ marginTop: 40 }}>–ö–∞–ª–µ–Ω–¥–∞—Ä –æ–±—Ä–æ–±–æ–∫</h3>
          <CalendarView events={extractCalendarEvents(result)} />
        </>
      )}
    </div>
  );
}

// üîò –ü—Ä–æ–≥—Ä–µ—Å–±–∞—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
function ProgressBar({ step }) {
  const steps = ["–ú—ñ—Å—Ç–æ", "–°–µ–∑–æ–Ω", "–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫", "–†–µ–∑—É–ª—å—Ç–∞—Ç–∏"];
  return (
    <div style={{ display: "flex", justifyContent: "space-between", marginBottom: 20 }}>
      {steps.map((label, i) => (
        <div
          key={i}
          style={{
            fontWeight: i + 1 === step ? "bold" : "normal",
            color: i + 1 === step ? "#2d6cdf" : "#999",
          }}
        >
          {i + 1}. {label}
        </div>
      ))}
    </div>
  );
}
function extractCalendarEvents(result) {
  if (!result) return [];

  const events = [];
  const { sprayDates, diseaseSummary } = result;

  // ‚û§ –û–±—Ä–æ–±–∫–∏ –ø—Ä–æ—Ç–∏ —Ñ—ñ—Ç–æ—Ñ—Ç–æ—Ä–æ–∑—É
  sprayDates.forEach((dateStr, i) => {
    events.push({
      date: dateStr, // —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–¥.–º–º.—Ä—Ä—Ä—Ä
      title: `–û–±—Ä–æ–±–∫–∞ ${i + 1}`,
      description: `–§—ñ—Ç–æ—Ñ—Ç–æ—Ä–æ–∑: ${rotationProducts[i % rotationProducts.length]}`,
    });
  });

  // ‚û§ –û–±—Ä–æ–±–∫–∏ –ø—Ä–æ—Ç–∏ —ñ–Ω—à–∏—Ö —Ö–≤–æ—Ä–æ–±
  diseaseSummary?.forEach(({ name, riskDates }) => {
    const rotation = {
      "–°—ñ—Ä–∞ –≥–Ω–∏–ª—å": rotationGrayMold,
      "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ä—ñ–æ–∑": rotationAlternaria,
      "–ë–∞–∫—Ç–µ—Ä—ñ–æ–∑": rotationBacteriosis,
    }[name] || [];

    const selected = getAdvancedTreatments(riskDates);
    selected.forEach((item, i) => {
      events.push({
        date: item.date.toLocaleDateString("uk-UA"), // –¥–¥.–º–º.—Ä—Ä—Ä—Ä
        title: `–û–±—Ä–æ–±–∫–∞ (${name})`,
        description: `${rotation[i % rotation.length]}`,
      });
    });
  });

  return events;
}
