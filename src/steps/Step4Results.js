import React, { useState } from "react";
import { parseISO, differenceInDays } from "date-fns";

const rotationProducts = [
  "–ó–æ—Ä–≤–µ–∫ –Ü–Ω–∫–∞–Ω—Ç—ñ—è", "–†–∏–¥–æ–º—ñ–ª –ì–æ–ª–¥", "–¢–∞–Ω–æ—Å", "–ê–∫—Ä–æ–±–∞—Ç –ú–¶",
  "–û—Ä–æ–Ω–¥—ñ—Å –£–ª—å—Ç—Ä–∞", "–†–∞–Ω–º–∞–Ω –¢–û–ü", "–†–µ–≤—É—Å", "–ö—É—Ä–∑–∞—Ç –†", "–Ü–Ω—Ñ—ñ–Ω—ñ—Ç–æ",
];

const rotationGrayMold = ["–õ—É–Ω–∞ –ï–∫—Å–ø—ñ—Ä—ñ—î–Ω—Å", "–°—ñ–≥–Ω—É–º", "–°–∫–∞–ª–∞", "–¢–µ–ª—å–¥–æ—Ä", "–°–∫–æ—Ä", "–ù–∞—Ç—ñ–≤–æ"];
const rotationAlternaria = rotationGrayMold;
const rotationBacteriosis = ["–ú–µ–¥—è–Ω –ï–∫—Å—Ç—Ä–∞", "–ö–∞–∑—É–º—ñ–Ω", "–°–µ—Ä–µ–Ω–∞–¥–∞"];

function getFilteredTreatmentsWithDynamicGap(riskDates) {
  const dates = [...riskDates].map(d => (d instanceof Date ? d : new Date(d))).sort((a, b) => a - b);
  const selected = [];
  let i = 0;
  while (i < dates.length) {
    const current = dates[i];
    selected.push(current);

    // –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —á–∏ —î 4+ –¥–Ω—ñ —Ä–∏–∑–∏–∫—É –ø—ñ–¥—Ä—è–¥
    let gapDays = 7;
    let count = 1;
    for (let j = i + 1; j < dates.length; j++) {
      const diff = differenceInDays(dates[j], dates[j - 1]);
      if (diff === 1) count++;
      else break;
    }
    if (count >= 4) gapDays = 5;

    // –ø—Ä–æ—Å–∫–∞–∫—É—î–º–æ –¥–æ –¥–∞—Ç–∏ —á–µ—Ä–µ–∑ gapDays
    let nextIndex = i + 1;
    while (nextIndex < dates.length && differenceInDays(dates[nextIndex], current) < gapDays) {
      nextIndex++;
    }
    i = nextIndex;
  }
  return selected;
}

function TreatmentTable({ title, treatments, rotation }) {
  return (
    <div className="mb-8">
      <h3 className="text-lg font-bold mb-2">{title}</h3>
      <table className="table-auto w-full text-sm border border-gray-300">
        <thead className="bg-gray-100">
          <tr>
            <th className="px-3 py-2 text-left border">–î–∞—Ç–∞</th>
            <th className="px-3 py-2 text-left border">–ü—Ä–µ–ø–∞—Ä–∞—Ç</th>
            <th className="px-3 py-2 text-left border">–Ü–Ω—Ç–µ—Ä–≤–∞–ª</th>
          </tr>
        </thead>
        <tbody>
          {treatments.map(({ date, interval }, i) => (
            <tr key={i} className="even:bg-gray-50">
              <td className="px-3 py-2 border">{date.toLocaleDateString("uk-UA")}</td>
              <td className="px-3 py-2 border">{rotation[i % rotation.length]}</td>
              <td className="px-3 py-2 border">{interval}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default function Step4Results({ result, onRestart }) {
  if (!result) return <p>–î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ</p>;
  const { sprayDates, diagnostics, weeklyPlan, diseaseSummary } = result;

  const fitoTreatments = sprayDates.map((d, i) => {
    const cur = parseISO(d.split(".").reverse().join("-"));
    const prev = i > 0 ? parseISO(sprayDates[i - 1].split(".").reverse().join("-")) : null;
    const interval = prev ? `${differenceInDays(cur, prev)} –¥—ñ–± –ø—ñ—Å–ª—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó` : "‚Äî";
    return { date: cur, interval };
  });

  const extraDiseaseTreatments = (name, rotation) => {
    const disease = diseaseSummary.find(d => d.name === name);
    if (!disease || !disease.riskDates?.length) return [];
    const rawDates = getFilteredTreatmentsWithDynamicGap(disease.riskDates);
    return rawDates.map((date, i) => {
      const prev = i > 0 ? rawDates[i - 1] : null;
      const interval = prev ? `${differenceInDays(date, prev)} –¥—ñ–± –ø—ñ—Å–ª—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó` : "‚Äî";
      return { date, interval };
    });
  };

  return (
    <div className="px-4">
      <h2 className="text-xl font-bold mb-4">–ö—Ä–æ–∫ 4: –†–µ–∑—É–ª—å—Ç–∞—Ç–∏</h2>

      <TreatmentTable
        title="–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –≤–Ω–µ—Å–µ–Ω–Ω—è (–ø—Ä–æ—Ç–∏ —Ñ—ñ—Ç–æ—Ñ—Ç–æ—Ä–æ–∑—É)"
        treatments={fitoTreatments}
        rotation={rotationProducts}
      />

      <TreatmentTable
        title="–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –≤–Ω–µ—Å–µ–Ω–Ω—è (–ø—Ä–æ—Ç–∏: –°—ñ—Ä–∞ –≥–Ω–∏–ª—å)"
        treatments={extraDiseaseTreatments("–°—ñ—Ä–∞ –≥–Ω–∏–ª—å", rotationGrayMold)}
        rotation={rotationGrayMold}
      />

      <TreatmentTable
        title="–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –≤–Ω–µ—Å–µ–Ω–Ω—è (–ø—Ä–æ—Ç–∏: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ä—ñ–æ–∑)"
        treatments={extraDiseaseTreatments("–ê–ª—å—Ç–µ—Ä–Ω–∞—Ä—ñ–æ–∑", rotationAlternaria)}
        rotation={rotationAlternaria}
      />

      <TreatmentTable
        title="–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –≤–Ω–µ—Å–µ–Ω–Ω—è (–ø—Ä–æ—Ç–∏: –ë–∞–∫—Ç–µ—Ä—ñ–æ–∑)"
        treatments={extraDiseaseTreatments("–ë–∞–∫—Ç–µ—Ä—ñ–æ–∑", rotationBacteriosis)}
        rotation={rotationBacteriosis}
      />

      <div className="mt-8">
        <button
          onClick={onRestart}
          className="px-6 py-3 bg-blue-600 text-white rounded-md hover:bg-blue-700"
        >
          üîÑ –ü–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É
        </button>
      </div>
    </div>
  );
}
