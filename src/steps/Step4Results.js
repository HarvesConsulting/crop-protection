import React, { useState } from "react";
import { parseISO, differenceInDays } from "date-fns";
import "./Step4Results.css";

const rotationProducts = [
  { name: "–ó–æ—Ä–≤–µ–∫ –Ü–Ω–∫–∞–Ω—Ç—ñ—è", rate: "0,5–ª/–≥–∞" },
  { name: "–†–∏–¥–æ–º—ñ–ª –ì–æ–ª–¥", rate: "2,5–∫–≥/–≥–∞" },
  { name: "–¢–∞–Ω–æ—Å", rate: "0,6–∫–≥/–≥–∞" },
  { name: "–ê–∫—Ä–æ–±–∞—Ç –ú–¶", rate: "2–∫–≥/–≥–∞" },
  { name: "–û—Ä–æ–Ω–¥—ñ—Å –£–ª—å—Ç—Ä–∞", rate: "0,4–ª/–≥–∞" },
  { name: "–†–∞–Ω–º–∞–Ω –¢–û–ü", rate: "0,5–ª/–≥–∞" },
  { name: "–†–µ–≤—É—Å –¢–û–ü", rate: "0,6–ª/–≥–∞" },
  { name: "–ö—É—Ä–∑–∞—Ç –†", rate: "2,5–∫–≥/–≥–∞" },
  { name: "–Ü–Ω—Ñ—ñ–Ω—ñ—Ç–æ", rate: "1,6–ª/–≥–∞" },
];

const rotationGrayMold = [
  { name: "–õ—É–Ω–∞ –ï–∫—Å–ø—ñ—Ä—ñ—î–Ω—Å", rate: "0,75–ª/–≥–∞" },
  { name: "–°—ñ–≥–Ω—É–º", rate: "1,5–∫–≥/–≥–∞" },
  { name: "–°–∫–∞–ª–∞", rate: "2–ª/–≥–∞" },
  { name: "–¢–µ–ª—å–¥–æ—Ä", rate: "1,5–∫–≥/–≥–∞" },
  { name: "–°–∫–æ—Ä", rate: "0,6–ª/–≥–∞" },
  { name: "–ù–∞—Ç—ñ–≤–æ", rate: "0,4–∫–≥/–≥–∞" },
];

const rotationAlternaria = rotationGrayMold;

const rotationBacteriosis = [
  { name: "–ú–µ–¥—è–Ω –ï–∫—Å—Ç—Ä–∞", rate: "2–ª/–≥–∞" },
  { name: "–ö–∞–∑—É–º—ñ–Ω", rate: "1,5-3–ª/–≥–∞" },
  { name: "–°–µ—Ä–µ–Ω–∞–¥–∞", rate: "2–ª/–≥–∞" },
];

function getAdvancedTreatments(riskDates, minGap = 7, shortGap = 5) {
  const sorted = [...riskDates].map(d => new Date(d)).sort((a, b) => a - b);
  const selected = [];
  let i = 0;

  while (i < sorted.length) {
    const current = sorted[i];
    if (
      !selected.length ||
      differenceInDays(current, selected[selected.length - 1].date) >= selected[selected.length - 1].gap
    ) {
      let streak = 1;
      let j = i + 1;
      while (
        j < sorted.length &&
        differenceInDays(sorted[j], sorted[j - 1]) === 1
      ) {
        streak++;
        j++;
      }
      const gap = streak >= 4 ? shortGap : minGap;
      selected.push({ date: current, gap });
    }
    i++;
  }

  return selected;
}

function CardView({ title, entries }) {
  return (
    <div className="card-section">
      <h3>{title}</h3>
      {entries.map((item, i) => (
        <div key={i} className="card">
          <div className="card-index">#{i + 1}</div>
          {Object.entries(item).map(([key, value]) => (
            <div key={key} className="card-row">
              <strong>{key}:</strong> {value}
            </div>
          ))}
        </div>
      ))}
    </div>
  );
}

export default function Step4Results({ result, onRestart }) {
  const [blitecastMode, setBlitecastMode] = useState(false);

  if (!result) return <p>–î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ</p>;

  const { sprayDates, diagnostics, weeklyPlan, diseaseSummary } = result;

  const sprayData = sprayDates.map((d, i) => {
    const cur = parseISO(d.split(".").reverse().join("-"));
    const prev = i > 0 ? parseISO(sprayDates[i - 1].split(".").reverse().join("-")) : null;
    const gap = prev ? `${differenceInDays(cur, prev)} –¥—ñ–± –ø—ñ—Å–ª—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó` : "‚Äî";
    const product = rotationProducts[i % rotationProducts.length];
    return {
      –î–∞—Ç–∞: d,
      –ü—Ä–µ–ø–∞—Ä–∞—Ç: product.name,
      "–ù–æ—Ä–º–∞, –ª/–∫–≥/–≥–∞": product.rate,
      –Ü–Ω—Ç–µ—Ä–≤–∞–ª: gap,
    };
  });

  const diseaseCardsGrouped = diseaseSummary?.map(({ name, riskDates }) => {
    const rotation = {
      "–°—ñ—Ä–∞ –≥–Ω–∏–ª—å": rotationGrayMold,
      "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ä—ñ–æ–∑": rotationAlternaria,
      "–ë–∞–∫—Ç–µ—Ä—ñ–æ–∑": rotationBacteriosis,
    }[name] || [];
    const treatments = getAdvancedTreatments(riskDates);
    const entries = treatments.map((item, i) => {
      const product = rotation[i % rotation.length];
      return {
        –î–∞—Ç–∞: item.date.toLocaleDateString("uk-UA"),
        –ü—Ä–µ–ø–∞—Ä–∞—Ç: product.name,
        "–ù–æ—Ä–º–∞, –ª/–∫–≥/–≥–∞": product.rate,
        –Ü–Ω—Ç–µ—Ä–≤–∞–ª:
          i === 0
            ? "‚Äî"
            : `${differenceInDays(item.date, treatments[i - 1].date)} –¥—ñ–± –ø—ñ—Å–ª—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó`,
      };
    });
    return { name, entries };
  });

  const diagnosticsData = diagnostics.map((d) => ({
    –î–∞—Ç–∞: d.date.toLocaleDateString("uk-UA"),
    "RH ‚â• 90%": d.wetHours,
    "RH ‚â• 90% & T 10‚Äì28¬∞C": d.condHours ?? 0,
    "Tavg (–≤–æ–ª–æ–≥—ñ), ¬∞C": Number.isFinite(d.wetTempAvg)
      ? d.wetTempAvg.toFixed(1)
      : "‚Äî",
    DSV: Math.min(dsvFromWet(d.wetHours, d.wetTempAvg), 4),
  }));

  const weeklyCards = weeklyPlan.map((w) => ({
    –¢–∏–∂–¥–µ–Ω—å: `${w.startStr} ‚Äì ${w.endStr}`,
    DSV: w.weeklyDSV,
    "–û–ø–∞–¥–∏, –º–º": w.rainSum.toFixed(1),
    –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: w.rec,
  }));

  return (
    <div className="container">
      <h2>–ö—Ä–æ–∫ 4: –†–µ–∑—É–ª—å—Ç–∞—Ç–∏</h2>
      <p className="description">
        –ù–∏–∂—á–µ –ø–æ–∫–∞–∑–∞–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –¥–∞—Ç–∏ –æ–±—Ä–æ–±–∫–∏. –í–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–º–∫–Ω—É—Ç–∏ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π —Ä–µ–∂–∏–º BLITECAST –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.
      </p>

      <button className="toggle-button" onClick={() => setBlitecastMode(!blitecastMode)}>
        {blitecastMode ? "üîΩ –°—Ö–æ–≤–∞—Ç–∏ BLITECAST" : "üî¨ –ü–æ–∫–∞–∑–∞—Ç–∏ BLITECAST"}
      </button>

      <CardView title="–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –≤–Ω–µ—Å–µ–Ω–Ω—è (–ø—Ä–æ—Ç–∏ —Ñ—ñ—Ç–æ—Ñ—Ç–æ—Ä–æ–∑—É)" entries={sprayData} />

      {diseaseCardsGrouped &&
        diseaseCardsGrouped.map(({ name, entries }) => (
          <CardView key={name} title={`–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –≤–Ω–µ—Å–µ–Ω–Ω—è (–ø—Ä–æ—Ç–∏: ${name})`} entries={entries} />
        ))}

      {blitecastMode && (
        <>
          <CardView title="–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è—Ö" entries={diagnosticsData} />
          <CardView title="–©–æ—Ç–∏–∂–Ω–µ–≤—ñ –ø—ñ–¥—Å—É–º–∫–∏" entries={weeklyCards} />
        </>
      )}

      <button className="restart-button" onClick={onRestart}>
        üîÑ –ü–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É
      </button>
    </div>
  );
}

function dsvFromWet(wetHours, wetTempAvg) {
  if (!Number.isFinite(wetHours) || !Number.isFinite(wetTempAvg)) return 0;
  if (wetHours < 6) return 0;

  const DSV_RULES = [
    { tempMin: 21, tempMax: 27, bands: [{ h: 6, dsv: 2 }, { h: 8, dsv: 3 }, { h: 10, dsv: 4 }] },
    { tempMin: 13, tempMax: 21, bands: [{ h: 6, dsv: 1 }, { h: 8, dsv: 2 }, { h: 10, dsv: 3 }, { h: 12, dsv: 4 }] },
    { tempMin: 7, tempMax: 13, bands: [{ h: 6, dsv: 1 }, { h: 8, dsv: 1 }, { h: 10, dsv: 2 }, { h: 12, dsv: 3 }, { h: 14, dsv: 4 }] },
    { tempMin: 27, tempMax: 40, bands: [{ h: 6, dsv: 1 }, { h: 8, dsv: 2 }, { h: 10, dsv: 3 }] },
  ];

  for (const rule of DSV_RULES) {
    if (wetTempAvg >= rule.tempMin && wetTempAvg < rule.tempMax) {
      const bands = [...rule.bands].sort((a, b) => b.h - a.h);
      for (const b of bands) {
        if (wetHours >= b.h) return b.dsv;
      }
    }
  }

  return 0;
}
