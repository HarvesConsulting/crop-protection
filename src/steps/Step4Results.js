import React from "react";
import { parseISO, differenceInDays } from "date-fns";

const rotationProducts = [
  "–ó–æ—Ä–≤–µ–∫ –Ü–Ω–∫–∞–Ω—Ç—ñ—è", "–†–∏–¥–æ–º—ñ–ª –ì–æ–ª–¥", "–¢–∞–Ω–æ—Å", "–ê–∫—Ä–æ–±–∞—Ç –ú–¶",
  "–û—Ä–æ–Ω–¥—ñ—Å –£–ª—å—Ç—Ä–∞", "–†–∞–Ω–º–∞–Ω –¢–û–ü", "–†–µ–≤—É—Å", "–ö—É—Ä–∑–∞—Ç –†", "–Ü–Ω—Ñ—ñ–Ω—ñ—Ç–æ",
];

export default function Step4Results({ result, onRestart }) {
  if (!result) return <p>–î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ</p>;

  const { sprayDates, diagnostics, weeklyPlan } = result;

  return (
    <div>
      <h2>–ö—Ä–æ–∫ 4: –†–µ–∑—É–ª—å—Ç–∞—Ç–∏</h2>

      <div style={{ marginBottom: 24 }}>
        <h3>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –≤–Ω–µ—Å–µ–Ω–Ω—è</h3>
        {sprayDates.length > 0 ? (
          <ol>
            {sprayDates.map((d, i) => {
              const cur = parseISO(d.split(".").reverse().join("-")); // dd.MM.yyyy ‚Üí ISO
              const prev = i > 0 ? parseISO(sprayDates[i - 1].split(".").reverse().join("-")) : null;
              const gap = prev ? differenceInDays(cur, prev) : null;

              return (
                <li key={i} style={{ marginBottom: 4 }}>
                  {d} ‚Äî {rotationProducts[i % rotationProducts.length]}
                  {gap !== null && (
                    <span style={{ color: "#555" }}> ({gap} –¥—ñ–± –ø—ñ—Å–ª—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó)</span>
                  )}
                </li>
              );
            })}
          </ol>
        ) : (
          <p>‚Äî</p>
        )}
      </div>

      <div style={{ marginBottom: 24 }}>
        <h3>–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è—Ö</h3>
        <table style={{ width: "100%", fontSize: 14, borderCollapse: "collapse" }}>
          <thead>
            <tr>
              <th align="left">–î–∞—Ç–∞</th>
              <th>RH ‚â• 90%</th>
              <th>RH ‚â• 90% & T 10‚Äì28¬∞C</th>
              <th>Tavg (–≤–æ–ª–æ–≥—ñ), ¬∞C</th>
              <th>DSV</th>
            </tr>
          </thead>
          <tbody>
            {diagnostics.map((d, i) => (
              <tr key={i}>
                <td>{d.date.toLocaleDateString("uk-UA")}</td>
                <td align="center">{d.wetHours}</td>
                <td align="center">{d.condHours ?? 0}</td>
                <td align="center">
                  {Number.isFinite(d.wetTempAvg) ? d.wetTempAvg.toFixed(1) : "‚Äî"}
                </td>
                <td align="center">
                  {Math.min(dsvFromWet(d.wetHours, d.wetTempAvg), 4)}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      <div>
        <h3>–©–æ—Ç–∏–∂–Ω–µ–≤—ñ –ø—ñ–¥—Å—É–º–∫–∏</h3>
        <table style={{ width: "100%", fontSize: 14, borderCollapse: "collapse" }}>
          <thead>
            <tr>
              <th align="left">–¢–∏–∂–¥–µ–Ω—å</th>
              <th align="center">DSV</th>
              <th align="center">–û–ø–∞–¥–∏, –º–º</th>
              <th align="left">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è</th>
            </tr>
          </thead>
          <tbody>
            {weeklyPlan.map((w, i) => (
              <tr key={i}>
                <td>{w.startStr} ‚Äì {w.endStr}</td>
                <td align="center">{w.weeklyDSV}</td>
                <td align="center">{w.rainSum.toFixed(1)}</td>
                <td>{w.rec}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      <div style={{ marginTop: 32 }}>
        <button
          onClick={onRestart}
          style={{
            padding: "12px 20px",
            fontSize: "16px",
            fontWeight: "bold",
            background: "#2d6cdf",
            color: "#fff",
            borderRadius: "8px",
            cursor: "pointer",
          }}
        >
          üîÑ –ü–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É
        </button>
      </div>
    </div>
  );
}

// –ü–æ—Ç—Ä—ñ–±–Ω–∞ —Ü—è —Ñ—É–Ω–∫—Ü—ñ—è ‚Äî –¥–æ–¥–∞–π –∞–±–æ —ñ–º–ø–æ—Ä—Ç—É–π
function dsvFromWet(wetHours, wetTempAvg) {
  if (!Number.isFinite(wetHours) || !Number.isFinite(wetTempAvg)) return 0;
  if (wetHours < 6) return 0;

  const DSV_RULES = [
    { tempMin: 21, tempMax: 27, bands: [{ h: 6, dsv: 2 }, { h: 8, dsv: 3 }, { h: 10, dsv: 4 }] },
    { tempMin: 13, tempMax: 21, bands: [{ h: 6, dsv: 1 }, { h: 8, dsv: 2 }, { h: 10, dsv: 3 }, { h: 12, dsv: 4 }] },
    { tempMin: 7, tempMax: 13,  bands: [{ h: 6, dsv: 1 }, { h: 8, dsv: 1 }, { h: 10, dsv: 2 }, { h: 12, dsv: 3 }, { h: 14, dsv: 4 }] },
    { tempMin: 27, tempMax: 40, bands: [{ h: 6, dsv: 1 }, { h: 8, dsv: 2 }, { h: 10, dsv: 3 }] },
  ];

  for (const rule of DSV_RULES) {
    if (wetTempAvg >= rule.tempMin && wetTempAvg < rule.tempMax) {
      const bands = [...rule.bands].sort((a, b) => b.h - a.h);
      for (const b of bands) {
        if (wetHours >= b.h) return b.dsv;
      }
    }
  }

  return 0;
}
