import React, { useState } from "react";
import {
  fetchForecastHourly,
  fetchForecastDailyRain,
  fetchWeatherFromNASA,
  fetchDailyRainFromNASA,
  computeMultiSpraySchedule,
  computeDSVSchedule,
  makeWeeklyPlan,
  extractSuitableHoursFromHourly,
} from "../engine";

import {
  isGrayMoldRisk,
  isAlternariaRisk,
  isBacterialRisk,
} from "../diseases";

import { format } from "date-fns";

const DEFAULT_DSV_THRESHOLD = 15;
const RAIN_HIGH_THRESHOLD_MM = 12.7;

export default function Step3Run({
  region,
  plantingDate,
  harvestDate,
  useForecast,
  diseases,
  lastSprayDate, // ‚úÖ –Ω–æ–≤–µ
  onResult,
  onBack,
}) {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  const runModel = async () => {
    setError("");
    setLoading(true);

    try {
      let wx, rain;

      if (useForecast) {
        // üîπ —ñ—Å—Ç–æ—Ä–∏—á–Ω—ñ –¥–∞–Ω—ñ
        [wx, rain] = await Promise.all([
          fetchWeatherFromNASA(region.lat, region.lon, plantingDate, harvestDate),
          fetchDailyRainFromNASA(region.lat, region.lon, plantingDate, harvestDate),
        ]);
      } else {
        const startDate = new Date(plantingDate);
        const today = new Date();
        today.setHours(0, 0, 0, 0);

        if (startDate < today) {
          // üîπ —è–∫—â–æ —Å—Ç–∞—Ä—Ç –º–∏–Ω—É–ª–∏–π ‚Üí —ñ—Å—Ç–æ—Ä—ñ—è –¥–æ —Å—å–æ–≥–æ–¥–Ω—ñ + –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 14 –¥–Ω—ñ–≤
          const [historyWx, historyRain] = await Promise.all([
            fetchWeatherFromNASA(region.lat, region.lon, plantingDate, today),
            fetchDailyRainFromNASA(region.lat, region.lon, plantingDate, today),
          ]);

          const [forecastWx, forecastRain] = await Promise.all([
            fetchForecastHourly(region.lat, region.lon, today, 14),
            fetchForecastDailyRain(region.lat, region.lon, today, 14),
          ]);

          wx = {
            daily: [...(historyWx.daily || []), ...(forecastWx.daily || [])],
            raw: forecastWx.raw,
            error: historyWx.error || forecastWx.error,
            url: forecastWx.url,
          };

          rain = {
            daily: [...(historyRain.daily || []), ...(forecastRain.daily || [])],
            error: historyRain.error || forecastRain.error,
            url: forecastRain.url,
          };
        } else {
          // üîπ —Ç—ñ–ª—å–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑
          wx = await fetchForecastHourly(region.lat, region.lon, plantingDate, 14);
          rain = await fetchForecastDailyRain(region.lat, region.lon, plantingDate, 14);
        }
      }

      if (wx.error) {
        setError(`–ü–æ–º–∏–ª–∫–∞ –ø–æ–≥–æ–¥–∏: ${wx.error}`);
        setLoading(false);
        return;
      }

      if (!Array.isArray(wx.daily) || wx.daily.length === 0) {
        setError("–ù–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≥–æ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö.");
        setLoading(false);
        return;
      }

      // ‚úÖ –≤—ñ–¥—Å—ñ–∫–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—ñ—Å–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –æ–±—Ä–æ–±–∫–∏
      const last = lastSprayDate ? new Date(lastSprayDate) : null;
      if (last) last.setHours(0, 0, 0, 0);

      const rowsAfter = last ? wx.daily.filter(r => r?.date && r.date > last) : wx.daily;
      const rainAfter = last
        ? (rain?.daily || []).filter(r => r?.date && r.date > last)
        : (rain?.daily || []);

      // ‚úÖ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ —Ç—ñ–ª—å–∫–∏ –∑ –≤—ñ–¥—Å—ñ—á–µ–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
      const comp = computeDSVSchedule(rowsAfter, DEFAULT_DSV_THRESHOLD);
      const sprays = computeMultiSpraySchedule(rowsAfter, rainAfter);

      const startForWeeksISO = lastSprayDate || plantingDate;
      const weekly = makeWeeklyPlan(
        comp.rows,
        rainAfter,
        startForWeeksISO,
        RAIN_HIGH_THRESHOLD_MM,
        useForecast ? undefined : 14
      );

      // ‚úÖ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –≥–æ–¥–∏–Ω–∏
      const suitable = extractSuitableHoursFromHourly(wx.raw);

      // üîç —Ä–∏–∑–∏–∫–∏ —Ö–≤–æ—Ä–æ–± —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –æ–±—Ä–æ–±–∫–∏
      const diseaseSummary = [];

      if (diseases?.includes("grayMold")) {
        const riskDates = rowsAfter.filter(isGrayMoldRisk).map(d => d.date);
        diseaseSummary.push({ name: "–°—ñ—Ä–∞ –≥–Ω–∏–ª—å", riskDates });
      }

      if (diseases?.includes("alternaria")) {
        const riskDates = rowsAfter.filter(isAlternariaRisk).map(d => d.date);
        diseaseSummary.push({ name: "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ä—ñ–æ–∑", riskDates });
      }

      if (diseases?.includes("bacteriosis")) {
        const riskDates = rowsAfter
          .filter(d => {
            const rv = rainAfter.find(r => r.date.getTime() === d.date.getTime())?.rain || 0;
            return isBacterialRisk(d, rv);
          })
          .map(d => d.date);
        diseaseSummary.push({ name: "–ë–∞–∫—Ç–µ—Ä—ñ–æ–∑", riskDates });
      }

      // ‚úÖ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const result = {
        sprayDates: sprays.map(d => format(d, "dd.MM.yyyy")),
        diagnostics: comp.rows,
        weeklyPlan: weekly,
        diseaseSummary,
        suitableHours: suitable,
        lastSprayDate: lastSprayDate ? format(new Date(lastSprayDate), "dd.MM.yyyy") : null,
      };

      console.log("Step3Run ‚Üí result:", result);
      onResult(result);
    } catch (e) {
      setError(`–ü–æ–º–∏–ª–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è: ${e?.message || e}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div>
      <h2>–ö—Ä–æ–∫ 3: –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫</h2>

      <p>
        –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏{" "}
        {useForecast ? "–º–æ–¥–µ–ª—å –∑–∞—Ö–∏—Å—Ç—É –∑–∞ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏" : "14-–¥–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑"}.
      </p>

      {error && (
        <div style={{ color: "red", marginBottom: 10 }}>
          ‚ö†Ô∏è {error}
        </div>
      )}

      <div style={{ display: "flex", gap: 10, marginTop: 16 }}>
        <button
          onClick={onBack}
          style={{
            padding: "10px 18px",
            fontSize: "15px",
            background: "#eee",
            borderRadius: "6px",
            cursor: "pointer",
          }}
        >
          –ù–∞–∑–∞–¥
        </button>

        <button
          onClick={runModel}
          disabled={loading}
          style={{
            padding: "10px 18px",
            fontSize: "15px",
            background: loading ? "#888" : "#2d6cdf",
            color: "#fff",
            borderRadius: "6px",
            cursor: loading ? "wait" : "pointer",
          }}
        >
          {loading ? "–û–±—á–∏—Å–ª–µ–Ω–Ω—è..." : "–ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫"}
        </button>
      </div>
    </div>
  );
}
